classDiagram
    class NavyAttack {
        +main(String[] args)
    }
    
    %% Controladores
    namespace Controller {

        class GameController {
            -Game game
            -GameView gameView
            +GameController()
            +startNewGame()
            +switchTurn()
            +processAttack(int x, int y)
            +GameOver() 
        }
        
        class MenuController {
            -User[] users
            -DataManager<User> usersManager
            -Authentication authenticator
            +saveData(User user)
            +loadData() User[]
            +play()
        }
    }
    
    %% Modelos
    namespace Model {

        class Authentication {
            +login(String, String) boolean
            +createAccount(String, String) User
            -validateUserData(String, String, Date) void
        }

        class DataGame {
            -User winner
            -User[] users
            -String timePlayed
            +DataGame(User[] user, String winner, String timePlayed)
            +getPlayers()  User[]
        }

        class User {
            -String username
            -String password
            -DataGame[] history
            +User(String username, String password)
            +addGameInHistory(DataGame game)
            +getHistory() dataGame[]
        }

        class DataManager~User~ {
            -List~User~ users
            +DataManager()
            +setData(List~User~) void
            +getData() List~User~
            +addData(User) void
            +deleteData(int) boolean
            +findDataById(int) User
            +getDataCount() int
            +isEmpty() boolean
            +clearData() void
            +existsById(int) boolean
        }

        class Game {
            -Duration time
            -int turnCount
            -GameState state
            -Player player1
            -Player player2
            -Player currentPlayer
            +Game()
            +initializeGame()
            +switchPlayer()
            +getCurrentPlayer() Player
            +isGameOver() boolean
            +attack(int x, int y, Player player)
            +createDataGame() DataGame
        }
        
        class Player {
            -User user
            -Board ownBoard
            -Board attackBoard
            -List~Ship~ fleet
            -int shipsRemaining
            +Player(User user)
            +placeShip(Ship ship, Position position, boolean horizontal) boolean
            +receiveAttack(Position position) AttackResult
            +attack(Position position, Player opponent) AttackResult
            +hasLost() boolean
            +getShipsRemaining() int
        }
        
        class Board {
            -Cell[][] grid
            -int size
            +Board(int size)
            +getCell(int x, int y) Cell
            +setCell(int x, int y, Cell cell)
            +isValidPosition(int x, int y) boolean
            +canPlaceShip(Position position, int size, boolean horizontal) boolean
            +placeShip(Ship ship, Position position, boolean horizontal) boolean
            +getAllShipsSunk() boolean
        }
        
        class Ship {
            -String name
            -int size
            -ShipType type
            -List~Position~ positions
            -int hitCount
            -boolean isSunk
            +Ship(String name, int size, ShipType type)
            +hit()
            +isSunk() boolean
            +getSize() int
            +getType() ShipType
            +getPositions() List~Position~
            +setPositions(List~Position~ positions)
        }
        
        class Position {
            -int x
            -int y
            +Position(int x, int y)
            +getX() int
            +getY() int
            +equals(Object obj) boolean
            +toString() String
        }
        
        class Cell {
            -CellState state
            -Ship ship
            +Cell()
            +setState(CellState state)
            +getState() CellState
            +setShip(Ship ship)
            +getShip() Ship
            +hasShip() boolean
        }
    }

    
    %% Vistas
    namespace View {

        class GameView {
            -BoardView player1BoardView
            -BoardView player2BoardView
            -MenuView menuView
            -GameController controller
            +GameView(GameController controller)
            +showGameScreen()
            +showMenu()
            +updateBoards()
            +displayMessage(String message)
            +showWinnerDialog(Player winner)
        }
        
        class BoardView {
            -JPanel boardPanel
            -JButton[][] cellButtons
            -Board board
            +BoardView(Board board)
            +updateBoard()
            +highlightCell(int x, int y, Color color)
            +addCellClickListener(ActionListener listener)
            +showShips(boolean show)
        }
        
        class MenuView {
            -JFrame frame
            -JButton newGameButton
            -JButton vsAIButton
            -JButton vsPlayerButton
            -JButton exitButton
            +MenuView()
            +showMenu()
            +addMenuListeners(GameController controller)
        }
    }
    
    %% %% Enums
    namespace enums {
        class ShipType {
            <<enumeration>>
            CARRIER
            CRUISER
            DESTROYER
            SUBMARINE
            +getSize() int
            +getName() String
        }
        
        class CellState {
            <<enumeration>>
            EMPTY
            SHIP
            HIT
            MISS
            SUNK
        }
        
        class AttackResult {
            <<enumeration>>
            MISS
            HIT
            SUNK
            ALREADY_ATTACKED
        }
    }

    
    %% Relaciones
    NavyAttack --> MenuController : creates
    MenuController --o Authentication
    MenuController --o DataManager
    MenuController --* MenuView
    MenuController <--> GameController

    DataManager --o User
    User --> DataGame

    GameController --> Game 
    GameController --> GameView 
    
    Game --> Player 
    Player --> Board 
    
    Board --> Cell 
    Cell --> Ship 
    Ship --> Position
    
    GameView --> BoardView 
    GameView --> GameController
    
    BoardView --> Board 
    
    %% Agregaciones y composiciones
    Game *-- Player 
    Player *-- Board 
    Board *-- Cell 
    Ship o-- Position 